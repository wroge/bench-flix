// Code generated by ent, DO NOT EDIT.

package movie

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/wroge/bench-flix/ent-flix/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldTitle, v))
}

// AddedAt applies equality check predicate on the "added_at" field. It's identical to AddedAtEQ.
func AddedAt(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldAddedAt, v))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v float64) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldRating, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContainsFold(FieldTitle, v))
}

// AddedAtEQ applies the EQ predicate on the "added_at" field.
func AddedAtEQ(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldAddedAt, v))
}

// AddedAtNEQ applies the NEQ predicate on the "added_at" field.
func AddedAtNEQ(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldAddedAt, v))
}

// AddedAtIn applies the In predicate on the "added_at" field.
func AddedAtIn(vs ...time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldAddedAt, vs...))
}

// AddedAtNotIn applies the NotIn predicate on the "added_at" field.
func AddedAtNotIn(vs ...time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldAddedAt, vs...))
}

// AddedAtGT applies the GT predicate on the "added_at" field.
func AddedAtGT(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldAddedAt, v))
}

// AddedAtGTE applies the GTE predicate on the "added_at" field.
func AddedAtGTE(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldAddedAt, v))
}

// AddedAtLT applies the LT predicate on the "added_at" field.
func AddedAtLT(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldAddedAt, v))
}

// AddedAtLTE applies the LTE predicate on the "added_at" field.
func AddedAtLTE(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldAddedAt, v))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v float64) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v float64) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...float64) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...float64) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v float64) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v float64) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v float64) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v float64) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldRating, v))
}

// HasDirectors applies the HasEdge predicate on the "directors" edge.
func HasDirectors() predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, DirectorsTable, DirectorsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDirectorsWith applies the HasEdge predicate on the "directors" edge with a given conditions (other predicates).
func HasDirectorsWith(preds ...predicate.Person) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := newDirectorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActors applies the HasEdge predicate on the "actors" edge.
func HasActors() predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ActorsTable, ActorsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActorsWith applies the HasEdge predicate on the "actors" edge with a given conditions (other predicates).
func HasActorsWith(preds ...predicate.Person) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := newActorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCountries applies the HasEdge predicate on the "countries" edge.
func HasCountries() predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, CountriesTable, CountriesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCountriesWith applies the HasEdge predicate on the "countries" edge with a given conditions (other predicates).
func HasCountriesWith(preds ...predicate.Country) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := newCountriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGenres applies the HasEdge predicate on the "genres" edge.
func HasGenres() predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, GenresTable, GenresPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGenresWith applies the HasEdge predicate on the "genres" edge with a given conditions (other predicates).
func HasGenresWith(preds ...predicate.Genre) predicate.Movie {
	return predicate.Movie(func(s *sql.Selector) {
		step := newGenresStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Movie) predicate.Movie {
	return predicate.Movie(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Movie) predicate.Movie {
	return predicate.Movie(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Movie) predicate.Movie {
	return predicate.Movie(sql.NotPredicates(p))
}
