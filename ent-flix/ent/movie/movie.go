// Code generated by ent, DO NOT EDIT.

package movie

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the movie type in the database.
	Label = "movie"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldAddedAt holds the string denoting the added_at field in the database.
	FieldAddedAt = "added_at"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// EdgeDirectors holds the string denoting the directors edge name in mutations.
	EdgeDirectors = "directors"
	// EdgeActors holds the string denoting the actors edge name in mutations.
	EdgeActors = "actors"
	// EdgeCountries holds the string denoting the countries edge name in mutations.
	EdgeCountries = "countries"
	// EdgeGenres holds the string denoting the genres edge name in mutations.
	EdgeGenres = "genres"
	// Table holds the table name of the movie in the database.
	Table = "movies"
	// DirectorsTable is the table that holds the directors relation/edge. The primary key declared below.
	DirectorsTable = "movie_directors"
	// DirectorsInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	DirectorsInverseTable = "people"
	// ActorsTable is the table that holds the actors relation/edge. The primary key declared below.
	ActorsTable = "movie_actors"
	// ActorsInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	ActorsInverseTable = "people"
	// CountriesTable is the table that holds the countries relation/edge. The primary key declared below.
	CountriesTable = "movie_countries"
	// CountriesInverseTable is the table name for the Country entity.
	// It exists in this package in order to avoid circular dependency with the "country" package.
	CountriesInverseTable = "countries"
	// GenresTable is the table that holds the genres relation/edge. The primary key declared below.
	GenresTable = "movie_genres"
	// GenresInverseTable is the table name for the Genre entity.
	// It exists in this package in order to avoid circular dependency with the "genre" package.
	GenresInverseTable = "genres"
)

// Columns holds all SQL columns for movie fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldAddedAt,
	FieldRating,
}

var (
	// DirectorsPrimaryKey and DirectorsColumn2 are the table columns denoting the
	// primary key for the directors relation (M2M).
	DirectorsPrimaryKey = []string{"movie_id", "person_id"}
	// ActorsPrimaryKey and ActorsColumn2 are the table columns denoting the
	// primary key for the actors relation (M2M).
	ActorsPrimaryKey = []string{"movie_id", "person_id"}
	// CountriesPrimaryKey and CountriesColumn2 are the table columns denoting the
	// primary key for the countries relation (M2M).
	CountriesPrimaryKey = []string{"movie_id", "country_id"}
	// GenresPrimaryKey and GenresColumn2 are the table columns denoting the
	// primary key for the genres relation (M2M).
	GenresPrimaryKey = []string{"movie_id", "genre_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Movie queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByAddedAt orders the results by the added_at field.
func ByAddedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddedAt, opts...).ToFunc()
}

// ByRating orders the results by the rating field.
func ByRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRating, opts...).ToFunc()
}

// ByDirectorsCount orders the results by directors count.
func ByDirectorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDirectorsStep(), opts...)
	}
}

// ByDirectors orders the results by directors terms.
func ByDirectors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDirectorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActorsCount orders the results by actors count.
func ByActorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActorsStep(), opts...)
	}
}

// ByActors orders the results by actors terms.
func ByActors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCountriesCount orders the results by countries count.
func ByCountriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCountriesStep(), opts...)
	}
}

// ByCountries orders the results by countries terms.
func ByCountries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCountriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGenresCount orders the results by genres count.
func ByGenresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGenresStep(), opts...)
	}
}

// ByGenres orders the results by genres terms.
func ByGenres(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGenresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDirectorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DirectorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DirectorsTable, DirectorsPrimaryKey...),
	)
}
func newActorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ActorsTable, ActorsPrimaryKey...),
	)
}
func newCountriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CountriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, CountriesTable, CountriesPrimaryKey...),
	)
}
func newGenresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GenresInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, GenresTable, GenresPrimaryKey...),
	)
}
