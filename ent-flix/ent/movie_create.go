// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wroge/bench-flix/ent-flix/ent/country"
	"github.com/wroge/bench-flix/ent-flix/ent/genre"
	"github.com/wroge/bench-flix/ent-flix/ent/movie"
	"github.com/wroge/bench-flix/ent-flix/ent/person"
)

// MovieCreate is the builder for creating a Movie entity.
type MovieCreate struct {
	config
	mutation *MovieMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (mc *MovieCreate) SetTitle(s string) *MovieCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetAddedAt sets the "added_at" field.
func (mc *MovieCreate) SetAddedAt(t time.Time) *MovieCreate {
	mc.mutation.SetAddedAt(t)
	return mc
}

// SetRating sets the "rating" field.
func (mc *MovieCreate) SetRating(f float64) *MovieCreate {
	mc.mutation.SetRating(f)
	return mc
}

// SetID sets the "id" field.
func (mc *MovieCreate) SetID(i int64) *MovieCreate {
	mc.mutation.SetID(i)
	return mc
}

// AddDirectorIDs adds the "directors" edge to the Person entity by IDs.
func (mc *MovieCreate) AddDirectorIDs(ids ...int64) *MovieCreate {
	mc.mutation.AddDirectorIDs(ids...)
	return mc
}

// AddDirectors adds the "directors" edges to the Person entity.
func (mc *MovieCreate) AddDirectors(p ...*Person) *MovieCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mc.AddDirectorIDs(ids...)
}

// AddActorIDs adds the "actors" edge to the Person entity by IDs.
func (mc *MovieCreate) AddActorIDs(ids ...int64) *MovieCreate {
	mc.mutation.AddActorIDs(ids...)
	return mc
}

// AddActors adds the "actors" edges to the Person entity.
func (mc *MovieCreate) AddActors(p ...*Person) *MovieCreate {
	ids := make([]int64, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return mc.AddActorIDs(ids...)
}

// AddCountryIDs adds the "countries" edge to the Country entity by IDs.
func (mc *MovieCreate) AddCountryIDs(ids ...int64) *MovieCreate {
	mc.mutation.AddCountryIDs(ids...)
	return mc
}

// AddCountries adds the "countries" edges to the Country entity.
func (mc *MovieCreate) AddCountries(c ...*Country) *MovieCreate {
	ids := make([]int64, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mc.AddCountryIDs(ids...)
}

// AddGenreIDs adds the "genres" edge to the Genre entity by IDs.
func (mc *MovieCreate) AddGenreIDs(ids ...int64) *MovieCreate {
	mc.mutation.AddGenreIDs(ids...)
	return mc
}

// AddGenres adds the "genres" edges to the Genre entity.
func (mc *MovieCreate) AddGenres(g ...*Genre) *MovieCreate {
	ids := make([]int64, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return mc.AddGenreIDs(ids...)
}

// Mutation returns the MovieMutation object of the builder.
func (mc *MovieCreate) Mutation() *MovieMutation {
	return mc.mutation
}

// Save creates the Movie in the database.
func (mc *MovieCreate) Save(ctx context.Context) (*Movie, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MovieCreate) SaveX(ctx context.Context) *Movie {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MovieCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MovieCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MovieCreate) check() error {
	if _, ok := mc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Movie.title"`)}
	}
	if _, ok := mc.mutation.AddedAt(); !ok {
		return &ValidationError{Name: "added_at", err: errors.New(`ent: missing required field "Movie.added_at"`)}
	}
	if _, ok := mc.mutation.Rating(); !ok {
		return &ValidationError{Name: "rating", err: errors.New(`ent: missing required field "Movie.rating"`)}
	}
	return nil
}

func (mc *MovieCreate) sqlSave(ctx context.Context) (*Movie, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MovieCreate) createSpec() (*Movie, *sqlgraph.CreateSpec) {
	var (
		_node = &Movie{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(movie.Table, sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.Title(); ok {
		_spec.SetField(movie.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := mc.mutation.AddedAt(); ok {
		_spec.SetField(movie.FieldAddedAt, field.TypeTime, value)
		_node.AddedAt = value
	}
	if value, ok := mc.mutation.Rating(); ok {
		_spec.SetField(movie.FieldRating, field.TypeFloat64, value)
		_node.Rating = value
	}
	if nodes := mc.mutation.DirectorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.DirectorsTable,
			Columns: movie.DirectorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.ActorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.ActorsTable,
			Columns: movie.ActorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.CountriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.CountriesTable,
			Columns: movie.CountriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(country.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.GenresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   movie.GenresTable,
			Columns: movie.GenresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(genre.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Movie.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MovieUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (mc *MovieCreate) OnConflict(opts ...sql.ConflictOption) *MovieUpsertOne {
	mc.conflict = opts
	return &MovieUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Movie.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MovieCreate) OnConflictColumns(columns ...string) *MovieUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MovieUpsertOne{
		create: mc,
	}
}

type (
	// MovieUpsertOne is the builder for "upsert"-ing
	//  one Movie node.
	MovieUpsertOne struct {
		create *MovieCreate
	}

	// MovieUpsert is the "OnConflict" setter.
	MovieUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *MovieUpsert) SetTitle(v string) *MovieUpsert {
	u.Set(movie.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MovieUpsert) UpdateTitle() *MovieUpsert {
	u.SetExcluded(movie.FieldTitle)
	return u
}

// SetAddedAt sets the "added_at" field.
func (u *MovieUpsert) SetAddedAt(v time.Time) *MovieUpsert {
	u.Set(movie.FieldAddedAt, v)
	return u
}

// UpdateAddedAt sets the "added_at" field to the value that was provided on create.
func (u *MovieUpsert) UpdateAddedAt() *MovieUpsert {
	u.SetExcluded(movie.FieldAddedAt)
	return u
}

// SetRating sets the "rating" field.
func (u *MovieUpsert) SetRating(v float64) *MovieUpsert {
	u.Set(movie.FieldRating, v)
	return u
}

// UpdateRating sets the "rating" field to the value that was provided on create.
func (u *MovieUpsert) UpdateRating() *MovieUpsert {
	u.SetExcluded(movie.FieldRating)
	return u
}

// AddRating adds v to the "rating" field.
func (u *MovieUpsert) AddRating(v float64) *MovieUpsert {
	u.Add(movie.FieldRating, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Movie.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(movie.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MovieUpsertOne) UpdateNewValues() *MovieUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(movie.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Movie.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MovieUpsertOne) Ignore() *MovieUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MovieUpsertOne) DoNothing() *MovieUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MovieCreate.OnConflict
// documentation for more info.
func (u *MovieUpsertOne) Update(set func(*MovieUpsert)) *MovieUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MovieUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *MovieUpsertOne) SetTitle(v string) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateTitle() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateTitle()
	})
}

// SetAddedAt sets the "added_at" field.
func (u *MovieUpsertOne) SetAddedAt(v time.Time) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetAddedAt(v)
	})
}

// UpdateAddedAt sets the "added_at" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateAddedAt() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateAddedAt()
	})
}

// SetRating sets the "rating" field.
func (u *MovieUpsertOne) SetRating(v float64) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.SetRating(v)
	})
}

// AddRating adds v to the "rating" field.
func (u *MovieUpsertOne) AddRating(v float64) *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.AddRating(v)
	})
}

// UpdateRating sets the "rating" field to the value that was provided on create.
func (u *MovieUpsertOne) UpdateRating() *MovieUpsertOne {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateRating()
	})
}

// Exec executes the query.
func (u *MovieUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MovieCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MovieUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MovieUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MovieUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MovieCreateBulk is the builder for creating many Movie entities in bulk.
type MovieCreateBulk struct {
	config
	err      error
	builders []*MovieCreate
	conflict []sql.ConflictOption
}

// Save creates the Movie entities in the database.
func (mcb *MovieCreateBulk) Save(ctx context.Context) ([]*Movie, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Movie, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MovieMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MovieCreateBulk) SaveX(ctx context.Context) []*Movie {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MovieCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MovieCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Movie.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MovieUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (mcb *MovieCreateBulk) OnConflict(opts ...sql.ConflictOption) *MovieUpsertBulk {
	mcb.conflict = opts
	return &MovieUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Movie.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MovieCreateBulk) OnConflictColumns(columns ...string) *MovieUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MovieUpsertBulk{
		create: mcb,
	}
}

// MovieUpsertBulk is the builder for "upsert"-ing
// a bulk of Movie nodes.
type MovieUpsertBulk struct {
	create *MovieCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Movie.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(movie.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MovieUpsertBulk) UpdateNewValues() *MovieUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(movie.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Movie.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MovieUpsertBulk) Ignore() *MovieUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MovieUpsertBulk) DoNothing() *MovieUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MovieCreateBulk.OnConflict
// documentation for more info.
func (u *MovieUpsertBulk) Update(set func(*MovieUpsert)) *MovieUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MovieUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *MovieUpsertBulk) SetTitle(v string) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateTitle() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateTitle()
	})
}

// SetAddedAt sets the "added_at" field.
func (u *MovieUpsertBulk) SetAddedAt(v time.Time) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetAddedAt(v)
	})
}

// UpdateAddedAt sets the "added_at" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateAddedAt() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateAddedAt()
	})
}

// SetRating sets the "rating" field.
func (u *MovieUpsertBulk) SetRating(v float64) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.SetRating(v)
	})
}

// AddRating adds v to the "rating" field.
func (u *MovieUpsertBulk) AddRating(v float64) *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.AddRating(v)
	})
}

// UpdateRating sets the "rating" field to the value that was provided on create.
func (u *MovieUpsertBulk) UpdateRating() *MovieUpsertBulk {
	return u.Update(func(s *MovieUpsert) {
		s.UpdateRating()
	})
}

// Exec executes the query.
func (u *MovieUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MovieCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MovieCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MovieUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
