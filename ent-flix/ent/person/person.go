// Code generated by ent, DO NOT EDIT.

package person

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the person type in the database.
	Label = "person"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeDirected holds the string denoting the directed edge name in mutations.
	EdgeDirected = "directed"
	// EdgeActed holds the string denoting the acted edge name in mutations.
	EdgeActed = "acted"
	// Table holds the table name of the person in the database.
	Table = "people"
	// DirectedTable is the table that holds the directed relation/edge. The primary key declared below.
	DirectedTable = "movie_directors"
	// DirectedInverseTable is the table name for the Movie entity.
	// It exists in this package in order to avoid circular dependency with the "movie" package.
	DirectedInverseTable = "movies"
	// ActedTable is the table that holds the acted relation/edge. The primary key declared below.
	ActedTable = "movie_actors"
	// ActedInverseTable is the table name for the Movie entity.
	// It exists in this package in order to avoid circular dependency with the "movie" package.
	ActedInverseTable = "movies"
)

// Columns holds all SQL columns for person fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// DirectedPrimaryKey and DirectedColumn2 are the table columns denoting the
	// primary key for the directed relation (M2M).
	DirectedPrimaryKey = []string{"movie_id", "person_id"}
	// ActedPrimaryKey and ActedColumn2 are the table columns denoting the
	// primary key for the acted relation (M2M).
	ActedPrimaryKey = []string{"movie_id", "person_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Person queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDirectedCount orders the results by directed count.
func ByDirectedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDirectedStep(), opts...)
	}
}

// ByDirected orders the results by directed terms.
func ByDirected(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDirectedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActedCount orders the results by acted count.
func ByActedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActedStep(), opts...)
	}
}

// ByActed orders the results by acted terms.
func ByActed(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDirectedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DirectedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, DirectedTable, DirectedPrimaryKey...),
	)
}
func newActedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ActedTable, ActedPrimaryKey...),
	)
}
